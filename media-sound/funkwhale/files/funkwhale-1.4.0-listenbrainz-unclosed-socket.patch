diff '--color=auto' -ur funkwhale-1.4.0.orig/api/funkwhale_api/contrib/listenbrainz/client.py funkwhale-1.4.0/api/funkwhale_api/contrib/listenbrainz/client.py
--- funkwhale-1.4.0.orig/api/funkwhale_api/contrib/listenbrainz/client.py	2023-12-12 12:26:16.000000000 +0000
+++ funkwhale-1.4.0/api/funkwhale_api/contrib/listenbrainz/client.py	2024-07-31 00:58:35.174611366 +0000
@@ -117,25 +117,25 @@
             "Content-Type": "application/json",
         }
         body = json.dumps(data)
-        conn = HTTPSConnection(HOST_NAME, context=SSL_CONTEXT)
-        conn.request("POST", PATH_SUBMIT, body, headers)
-        response = conn.getresponse()
-        response_text = response.read()
-        try:
-            response_data = json.loads(response_text)
-        except json.decoder.JSONDecodeError:
-            response_data = response_text
+        with HTTPSConnection(HOST_NAME, context=SSL_CONTEXT) as conn:
+            conn.request("POST", PATH_SUBMIT, body, headers)
+            response = conn.getresponse()
+            response_text = response.read()
+            try:
+                response_data = json.loads(response_text)
+            except json.decoder.JSONDecodeError:
+                response_data = response_text
 
-        self._handle_ratelimit(response)
-        log_msg = f"Response {response.status}: {response_data!r}"
-        if response.status == 429 and retry < 5:  # Too Many Requests
-            self.logger.warning(log_msg)
-            return self._submit(listen_type, payload, retry + 1)
-        elif response.status == 200:
-            self.logger.debug(log_msg)
-        else:
-            self.logger.error(log_msg)
-        return response
+            self._handle_ratelimit(response)
+            log_msg = f"Response {response.status}: {response_data!r}"
+            if response.status == 429 and retry < 5:  # Too Many Requests
+                self.logger.warning(log_msg)
+                return self._submit(listen_type, payload, retry + 1)
+            elif response.status == 200:
+                self.logger.debug(log_msg)
+            else:
+                self.logger.error(log_msg)
+            return response
 
     def _wait_for_ratelimit(self):
         now = time.time()
